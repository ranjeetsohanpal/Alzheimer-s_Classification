{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8668279,"sourceType":"datasetVersion","datasetId":5194699}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Objective \n1. To also analyse how these factors contribute to the disease diagnosis.\n2. To predict the diagnosis of Alzheimer's disease based on the given person's demographics, lifestyle, symptoms.\n3. To compare different machine learning models and get the best model possible for predicting.","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-20T17:56:43.406248Z","iopub.execute_input":"2024-07-20T17:56:43.406653Z","iopub.status.idle":"2024-07-20T17:56:44.684524Z","shell.execute_reply.started":"2024-07-20T17:56:43.406611Z","shell.execute_reply":"2024-07-20T17:56:44.683075Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/alzheimers-disease-dataset/alzheimers_disease_data.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Exploratory Data Analysis and Feature Engineering","metadata":{}},{"cell_type":"code","source":"datapath = '/kaggle/input/alzheimers-disease-dataset/alzheimers_disease_data.csv'\ndf = pd.read_csv(datapath)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T18:04:15.710723Z","iopub.execute_input":"2024-07-20T18:04:15.711120Z","iopub.status.idle":"2024-07-20T18:04:15.787183Z","shell.execute_reply.started":"2024-07-20T18:04:15.711087Z","shell.execute_reply":"2024-07-20T18:04:15.785958Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"df.columns","metadata":{"execution":{"iopub.status.busy":"2024-07-20T18:07:50.440623Z","iopub.execute_input":"2024-07-20T18:07:50.440997Z","iopub.status.idle":"2024-07-20T18:07:50.449715Z","shell.execute_reply.started":"2024-07-20T18:07:50.440968Z","shell.execute_reply":"2024-07-20T18:07:50.448320Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"Index(['PatientID', 'Age', 'Gender', 'Ethnicity', 'EducationLevel', 'BMI',\n       'Smoking', 'AlcoholConsumption', 'PhysicalActivity', 'DietQuality',\n       'SleepQuality', 'FamilyHistoryAlzheimers', 'CardiovascularDisease',\n       'Diabetes', 'Depression', 'HeadInjury', 'Hypertension', 'SystolicBP',\n       'DiastolicBP', 'CholesterolTotal', 'CholesterolLDL', 'CholesterolHDL',\n       'CholesterolTriglycerides', 'MMSE', 'FunctionalAssessment',\n       'MemoryComplaints', 'BehavioralProblems', 'ADL', 'Confusion',\n       'Disorientation', 'PersonalityChanges', 'DifficultyCompletingTasks',\n       'Forgetfulness', 'Diagnosis', 'DoctorInCharge'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"df = df.rename(columns ={'PatientID':'patient_id','Age':'age', 'Gender':'gender', 'Ethnicity':'ethnicity', 'EducationLevel':'edu_level', 'BMI':'bmi',\n       'Smoking' : 'smoking', 'AlcoholConsumption':'alcohol_consumption', 'PhysicalActivity':'physical_activity', 'DietQuality':'diet_quality',\n       'SleepQuality':'sleep_quality', 'FamilyHistoryAlzheimers':'family_history', 'CardiovascularDisease':'cardiovascular_disease',\n       'Diabetes' : 'diabetes', 'Depression':'depression', 'HeadInjury':'head_injury', 'Hypertension':'hypertension', 'SystolicBP':'systolic_bp',\n       'DiastolicBP':'diastolic_bp', 'CholesterolTotal':'cholesterol_total', 'CholesterolLDL':'cholestrol_ldl', 'CholesterolHDL':'cholesterol_hdl',\n       'CholesterolTriglycerides':'triglycerides', 'MMSE':'mmse', 'FunctionalAssessment':'func_assessment',\n       'MemoryComplaints':'memory_complaint', 'BehavioralProblems':'behavioral_problem', 'ADL':'adl', 'Confusion':'confusion',\n       'Disorientation':'disorientation', 'PersonalityChanges':'personality_changes', 'DifficultyCompletingTasks':'diff_completing_tasks',\n       'Forgetfulness':'forgetfulness', 'Diagnosis':'diagnosis'})","metadata":{"execution":{"iopub.status.busy":"2024-07-20T18:14:30.451664Z","iopub.execute_input":"2024-07-20T18:14:30.452052Z","iopub.status.idle":"2024-07-20T18:14:30.463178Z","shell.execute_reply.started":"2024-07-20T18:14:30.452020Z","shell.execute_reply":"2024-07-20T18:14:30.461713Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"df = df.drop(columns = ['DoctorInCharge'])","metadata":{"execution":{"iopub.status.busy":"2024-07-20T18:15:08.089331Z","iopub.execute_input":"2024-07-20T18:15:08.089832Z","iopub.status.idle":"2024-07-20T18:15:08.096802Z","shell.execute_reply.started":"2024-07-20T18:15:08.089796Z","shell.execute_reply":"2024-07-20T18:15:08.095542Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T18:15:25.828140Z","iopub.execute_input":"2024-07-20T18:15:25.828672Z","iopub.status.idle":"2024-07-20T18:15:25.875386Z","shell.execute_reply.started":"2024-07-20T18:15:25.828626Z","shell.execute_reply":"2024-07-20T18:15:25.873881Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"   patient_id  age  gender  ethnicity  edu_level        bmi  smoking  \\\n0        4751   73       0          0          2  22.927749        0   \n1        4752   89       0          0          0  26.827681        0   \n2        4753   73       0          3          1  17.795882        0   \n3        4754   74       1          0          1  33.800817        1   \n4        4755   89       0          0          0  20.716974        0   \n\n   alcohol_consumption  physical_activity  diet_quality  ...  func_assessment  \\\n0            13.297218           6.327112      1.347214  ...         6.518877   \n1             4.542524           7.619885      0.518767  ...         7.118696   \n2            19.555085           7.844988      1.826335  ...         5.895077   \n3            12.209266           8.428001      7.435604  ...         8.965106   \n4            18.454356           6.310461      0.795498  ...         6.045039   \n\n   memory_complaint  behavioral_problem       adl  confusion  disorientation  \\\n0                 0                   0  1.725883          0               0   \n1                 0                   0  2.592424          0               0   \n2                 0                   0  7.119548          0               1   \n3                 0                   1  6.481226          0               0   \n4                 0                   0  0.014691          0               0   \n\n   personality_changes  diff_completing_tasks  forgetfulness  diagnosis  \n0                    0                      1              0          0  \n1                    0                      0              1          0  \n2                    0                      1              0          0  \n3                    0                      0              0          0  \n4                    1                      1              0          0  \n\n[5 rows x 34 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>patient_id</th>\n      <th>age</th>\n      <th>gender</th>\n      <th>ethnicity</th>\n      <th>edu_level</th>\n      <th>bmi</th>\n      <th>smoking</th>\n      <th>alcohol_consumption</th>\n      <th>physical_activity</th>\n      <th>diet_quality</th>\n      <th>...</th>\n      <th>func_assessment</th>\n      <th>memory_complaint</th>\n      <th>behavioral_problem</th>\n      <th>adl</th>\n      <th>confusion</th>\n      <th>disorientation</th>\n      <th>personality_changes</th>\n      <th>diff_completing_tasks</th>\n      <th>forgetfulness</th>\n      <th>diagnosis</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4751</td>\n      <td>73</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>22.927749</td>\n      <td>0</td>\n      <td>13.297218</td>\n      <td>6.327112</td>\n      <td>1.347214</td>\n      <td>...</td>\n      <td>6.518877</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1.725883</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4752</td>\n      <td>89</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>26.827681</td>\n      <td>0</td>\n      <td>4.542524</td>\n      <td>7.619885</td>\n      <td>0.518767</td>\n      <td>...</td>\n      <td>7.118696</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2.592424</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4753</td>\n      <td>73</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>17.795882</td>\n      <td>0</td>\n      <td>19.555085</td>\n      <td>7.844988</td>\n      <td>1.826335</td>\n      <td>...</td>\n      <td>5.895077</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.119548</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4754</td>\n      <td>74</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>33.800817</td>\n      <td>1</td>\n      <td>12.209266</td>\n      <td>8.428001</td>\n      <td>7.435604</td>\n      <td>...</td>\n      <td>8.965106</td>\n      <td>0</td>\n      <td>1</td>\n      <td>6.481226</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4755</td>\n      <td>89</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>20.716974</td>\n      <td>0</td>\n      <td>18.454356</td>\n      <td>6.310461</td>\n      <td>0.795498</td>\n      <td>...</td>\n      <td>6.045039</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.014691</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 34 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T18:29:43.609862Z","iopub.execute_input":"2024-07-20T18:29:43.610264Z","iopub.status.idle":"2024-07-20T18:29:43.633221Z","shell.execute_reply.started":"2024-07-20T18:29:43.610229Z","shell.execute_reply":"2024-07-20T18:29:43.631756Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2149 entries, 0 to 2148\nData columns (total 34 columns):\n #   Column                  Non-Null Count  Dtype  \n---  ------                  --------------  -----  \n 0   patient_id              2149 non-null   int64  \n 1   age                     2149 non-null   int64  \n 2   gender                  2149 non-null   int64  \n 3   ethnicity               2149 non-null   int64  \n 4   edu_level               2149 non-null   int64  \n 5   bmi                     2149 non-null   float64\n 6   smoking                 2149 non-null   int64  \n 7   alcohol_consumption     2149 non-null   float64\n 8   physical_activity       2149 non-null   float64\n 9   diet_quality            2149 non-null   float64\n 10  sleep_quality           2149 non-null   float64\n 11  family_history          2149 non-null   int64  \n 12  cardiovascular_disease  2149 non-null   int64  \n 13  diabetes                2149 non-null   int64  \n 14  depression              2149 non-null   int64  \n 15  head_injury             2149 non-null   int64  \n 16  hypertension            2149 non-null   int64  \n 17  systolic_bp             2149 non-null   int64  \n 18  diastolic_bp            2149 non-null   int64  \n 19  cholesterol_total       2149 non-null   float64\n 20  cholestrol_ldl          2149 non-null   float64\n 21  cholesterol_hdl         2149 non-null   float64\n 22  triglycerides           2149 non-null   float64\n 23  mmse                    2149 non-null   float64\n 24  func_assessment         2149 non-null   float64\n 25  memory_complaint        2149 non-null   int64  \n 26  behavioral_problem      2149 non-null   int64  \n 27  adl                     2149 non-null   float64\n 28  confusion               2149 non-null   int64  \n 29  disorientation          2149 non-null   int64  \n 30  personality_changes     2149 non-null   int64  \n 31  diff_completing_tasks   2149 non-null   int64  \n 32  forgetfulness           2149 non-null   int64  \n 33  diagnosis               2149 non-null   int64  \ndtypes: float64(12), int64(22)\nmemory usage: 571.0 KB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Great! NO missing values","metadata":{}},{"cell_type":"markdown","source":"Analysing the number of positive and negative values.","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\ndf['diagnosis'].value_counts().plot(kind='bar', title='Number of Positive and Negative Cases')\nplt.xlabel('Value')\nplt.ylabel('Count')\nplt.xticks(ticks=[0, 1], labels=['0', '1'])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T18:20:33.762475Z","iopub.execute_input":"2024-07-20T18:20:33.763576Z","iopub.status.idle":"2024-07-20T18:20:34.049128Z","shell.execute_reply.started":"2024-07-20T18:20:33.763527Z","shell.execute_reply":"2024-07-20T18:20:34.047915Z"},"trusted":true},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"It is found out that there are more negatives in the data than the positives which could lead to biasedness towards the majority class. This problem must be dealed with SMOTE(Synthetic Minority Oversampling Technique) or using models robust to imbalance.","metadata":{}},{"cell_type":"code","source":"ethnicity_dict = {0 : 'Caucasian', 1 : 'African American', 2 : 'Asian', 3 : 'Other'}\neducation_lvl = {0: 'None', 1 : 'High School', 2 : 'Bachelors', 3 : 'Higher'}\n","metadata":{"execution":{"iopub.status.busy":"2024-07-20T18:38:38.054744Z","iopub.execute_input":"2024-07-20T18:38:38.055124Z","iopub.status.idle":"2024-07-20T18:38:38.061347Z","shell.execute_reply.started":"2024-07-20T18:38:38.055094Z","shell.execute_reply":"2024-07-20T18:38:38.059915Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"ethnicity_based = df.groupby('ethnicity')['diagnosis'].value_counts().reset_index()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T18:40:05.934154Z","iopub.execute_input":"2024-07-20T18:40:05.934544Z","iopub.status.idle":"2024-07-20T18:40:05.948626Z","shell.execute_reply.started":"2024-07-20T18:40:05.934511Z","shell.execute_reply":"2024-07-20T18:40:05.947414Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"ethnicity_based","metadata":{"execution":{"iopub.status.busy":"2024-07-20T18:40:15.091774Z","iopub.execute_input":"2024-07-20T18:40:15.092162Z","iopub.status.idle":"2024-07-20T18:40:15.105063Z","shell.execute_reply.started":"2024-07-20T18:40:15.092133Z","shell.execute_reply":"2024-07-20T18:40:15.103676Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"   ethnicity  diagnosis  count\n0          0          0    815\n1          0          1    463\n2          1          0    308\n3          1          1    146\n4          2          0    122\n5          2          1     84\n6          3          0    144\n7          3          1     67","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ethnicity</th>\n      <th>diagnosis</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>815</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n      <td>463</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>0</td>\n      <td>308</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>146</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>0</td>\n      <td>122</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2</td>\n      <td>1</td>\n      <td>84</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>3</td>\n      <td>0</td>\n      <td>144</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>3</td>\n      <td>1</td>\n      <td>67</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"Plan (delete this after done)\n1. Perform the analysis on the basis of the ethnicity, gender, education level , smoking.\n2. Bin the bmi scale based on the health standards and encode it. \n3. Modify the numerical values to categorical. Check out various methods on how to deal with these.","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}